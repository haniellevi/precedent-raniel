Tarefa 2: Implementar o Webhook do Clerk para Sincronização de Utilizadores
Ação: Crie o Route Handler para o webhook do Clerk. Isto é essencial para que, quando um novo utilizador se regista no Clerk, ele seja automaticamente criado na nossa base de dados.

Crie o ficheiro: app/api/webhooks/clerk/route.ts

// app/api/webhooks/clerk/route.ts
import { Webhook } from 'svix';
import { headers } from 'next/headers';
import { WebhookEvent } from '@clerk/nextjs/server';
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function POST(req: Request) {
  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET;

  if (!WEBHOOK_SECRET) {
    throw new Error('Please add CLERK_WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local');
  }

  const headerPayload = headers();
  const svix_id = headerPayload.get("svix-id");
  const svix_timestamp = headerPayload.get("svix-timestamp");
  const svix_signature = headerPayload.get("svix-signature");

  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new Response('Error occured -- no svix headers', { status: 400 });
  }

  const payload = await req.json();
  const body = JSON.stringify(payload);

  const wh = new Webhook(WEBHOOK_SECRET);
  let evt: WebhookEvent;

  try {
    evt = wh.verify(body, {
      "svix-id": svix_id,
      "svix-timestamp": svix_timestamp,
      "svix-signature": svix_signature,
    }) as WebhookEvent;
  } catch (err) {
    console.error('Error verifying webhook:', err);
    return new Response('Error occured', { status: 400 });
  }

  const eventType = evt.type;

  if (eventType === 'user.created') {
    await prisma.user.create({
      data: {
        clerkUserId: payload.data.id,
        email: payload.data.email_addresses[0].email_address,
        name: `${payload.data.first_name || ''} ${payload.data.last_name || ''}`.trim(),
      },
    });
    return NextResponse.json({ message: 'User created' }, { status: 201 });
  }

  return new Response('', { status: 200 });
}
