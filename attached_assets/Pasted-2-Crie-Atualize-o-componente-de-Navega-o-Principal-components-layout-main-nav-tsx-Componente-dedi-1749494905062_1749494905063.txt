2. Crie/Atualize o componente de Navegação Principal: components/layout/main-nav.tsx
Componente dedicado para o menu da área logada.

// components/layout/main-nav.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';
import { SignedIn } from '@clerk/nextjs';

const navItems = [
  { name: 'Gerar Sermão', href: '/gerar' },
  { name: 'Histórico', href: '/historico' },
  { name: 'Meu DNA', href: '/dna' },
];

export default function MainNav() {
  const pathname = usePathname();
  return (
    <SignedIn>
      {navItems.map((item) => (
        <Link
          key={item.name}
          href={item.href}
          className={cn(
            "transition-colors hover:text-foreground/80",
            pathname.startsWith(item.href) ? "text-foreground" : "text-muted-foreground"
          )}
        >
          {item.name}
        </Link>
      ))}
    </SignedIn>
  );
}

3. Crie/Atualize o formulário de DNA com UX aprimorada: components/dna-form.tsx
Este é o novo formulário com menus de seleção e layout melhorado.

// components/dna-form.tsx
'use client';

import { useState } from 'react';
import { DnaProfile } from '@/lib/mockApi';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2, CheckCircle } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

interface DnaFormProps {
  initialProfile: DnaProfile;
}

export default function DnaForm({ initialProfile }: DnaFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  // ... (outros useStates para os campos do formulário)

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    // ... (lógica de envio para API, como antes)
    setIsLoading(false);
    setIsSuccess(true);
    setTimeout(() => setIsSuccess(false), 4000);
  };

  return (
    <Card className="w-full max-w-3xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle>Configuração do DNA de Pregação</CardTitle>
        <CardDescription>
          Forneça referências para a IA aprender seu estilo e gerar sermões com a sua voz.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="style">Estilo de Pregação</Label>
              <Select name="style" defaultValue={initialProfile.customAttributes?.style}>
                <SelectTrigger id="style"><SelectValue placeholder="Selecione um estilo" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="Expositivo">Expositivo</SelectItem>
                  <SelectItem value="Temático">Temático</SelectItem>
                  <SelectItem value="Narrativo">Narrativo</SelectItem>
                  <SelectItem value="Textual">Textual</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="tone">Tom da Pregação</Label>
              <Select name="tone" defaultValue={initialProfile.customAttributes?.tone}>
                <SelectTrigger id="tone"><SelectValue placeholder="Selecione um tom" /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="Inspirador">Inspirador</SelectItem>
                  <SelectItem value="Encorajador">Encorajador</SelectItem>
                  <SelectItem value="Confrontador">Confrontador</SelectItem>
                  <SelectItem value="Consolador">Consolador</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div>
            <Label htmlFor="sermon-content">Fonte de Dados 1: Texto de Sermões</Label>
            <Textarea id="sermon-content" name="sermon-content" placeholder="Cole aqui o texto de um ou mais sermões para análise..." rows={8} />
          </div>
          <div>
            <Label htmlFor="video-url">Fonte de Dados 2: URL de Vídeo do YouTube</Label>
            <Input id="video-url" name="video-url" placeholder="https://youtube.com/watch?v=..." />
          </div>

          <div className="flex justify-end items-center gap-4 pt-4">
            {isSuccess && <span className="text-sm text-green-600 flex items-center"><CheckCircle className="mr-2 h-4 w-4" />Salvo!</span>}
            <Button type="submit" disabled={isLoading}>
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Analisar e Salvar DNA
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}

4. Atualize a página de DNA: app/(dashboard)/dna/page.tsx
Este código garante que a página busque os dados e renderize o novo formulário centralizado.

// app/(dashboard)/dna/page.tsx
import DnaForm from '@/components/dna-form';
import { DnaProfile } from '@/lib/mockApi';

async function getDnaData(): Promise<DnaProfile> {
  const baseUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000';
  const res = await fetch(`${baseUrl}/api/dna`, { cache: 'no-store' });
  if (!res.ok) throw new Error('Failed to fetch DNA profile');
  return res.json();
}

export default async function DnaPage() {
  const dnaProfile = await getDnaData();

  return (
    <div className="space-y-4">
      <div className="text-center">
        <h1 className="text-3xl font-bold tracking-tight">Meu DNA de Pregador</h1>
        <p className="text-muted-foreground max-w-2xl mx-auto mt-2">
          Esta é a sua central de personalização. Configure os atributos abaixo para que a inteligência artificial aprenda a sua voz e estilo únicos.
        </p>
      </div>
      <div className="pt-4">
        <DnaForm initialProfile={dnaProfile} />
      </div>
    </div>
  );
}

5. Simplifique o Layout do Dashboard: app/(dashboard)/layout.tsx

// app/(dashboard)/layout.tsx
import { ReactNode } from 'react';

export default function DashboardLayout({ children }: { children: ReactNode }) {
  return <>{children}</>;
}

6. Atualize o Layout Raiz: app/layout.tsx

// app/layout.tsx
import './globals.css';
import { Inter } from 'next/font/google';
import { ClerkProvider } from '@clerk/nextjs';
import { Analytics } from '@vercel/analytics/react';
import Header from '@/components/layout/header';
import Footer from '@/components/layout/footer';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'SermonAI - Gerador de Sermões com IA',
  description: 'Crie sermões de alto impacto com a sua voz e personalidade.',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="pt-BR">
        <body className={inter.className}>
          <div className="relative flex min-h-screen flex-col bg-slate-50 dark:bg-slate-950">
            <Header />
            <main className="flex-1">
              <div className="container py-8">
                {children}
              </div>
            </main>
            <Footer />
          </div>
          <Analytics />
        </body>
      </html>
    </ClerkProvider>
  );
}