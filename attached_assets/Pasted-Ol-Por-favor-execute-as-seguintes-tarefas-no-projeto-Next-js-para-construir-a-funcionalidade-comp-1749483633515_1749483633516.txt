Olá! Por favor, execute as seguintes tarefas no projeto Next.js para construir a funcionalidade completa de "Gerar Sermão" com dados mock.Tarefa 1: Atualizar o Serviço de MockAção: Substitua completamente o conteúdo do arquivo lib/mockApi.ts pelo código abaixo. Este novo código adiciona a lógica para gerar e buscar sermões.Caminho do Arquivo: lib/mockApi.ts// lib/mockApi.ts

// --- Interfaces de Dados ---
export interface DnaProfile {
  type: 'padrao' | 'customizado';
  name: string;
  customAttributes?: {
    style: string;
    tone: string;
    vocabulary: string[];
  };
  calculatedPpm: number;
}

export interface Sermon {
  id: string;
  title: string;
  content: string; // Conteúdo em Markdown
  enrichmentSuggestions: string;
  parameters: {
    theme: string;
    purpose: string;
    duration: number;
  };
  createdAt: string;
}

// --- Dados Mock ---
const mockDnaProfile: DnaProfile = {
  type: 'customizado',
  name: 'Meu DNA Personalizado',
  customAttributes: {
    style: 'Expositivo e Prático',
    tone: 'Inspirador e Encorajador',
    vocabulary: ['graça', 'redenção', 'propósito', 'comunidade'],
  },
  calculatedPpm: 120,
};

const generatedSermonMock: Sermon = {
    id: 'sermon-gen-001',
    title: 'A Coragem para Recomeçar',
    content: `
# A Coragem para Recomeçar

## Introdução
Todos nós, em algum momento, enfrentamos a necessidade de recomeçar. Seja após um erro, uma perda ou simplesmente uma mudança de estação na vida. A Bíblia está repleta de histórias sobre novos começos, e hoje vamos explorar como encontrar a coragem necessária para dar o primeiro passo.

## Ponto 1: A Redenção de Pedro
Lembre-se de Pedro. Após negar a Jesus três vezes, ele se sentiu um fracasso total. Ele voltou a pescar, talvez pensando que seu tempo como discípulo havia acabado. Mas na praia, Jesus o encontrou e, em vez de repreendê-lo, ofereceu-lhe café da manhã e lhe deu uma nova missão: "Apascenta as minhas ovelhas". 

Isso nos ensina uma verdade poderosa: **nosso passado não define nosso futuro aos olhos de Deus**. A restauração está sempre disponível.

* Negação → Medo e Vergonha
* Restauração → Coragem e Propósito

## Ponto 2: A Oportunidade na Adversidade
Considere José. Vendido como escravo por seus irmãos, falsamente acusado e jogado na prisão. Cada passo parecia um beco sem saída. No entanto, cada adversidade foi, na verdade, um degrau que o preparou para o palácio. Ele mesmo disse a seus irmãos: "Vocês planejaram o mal contra mim, mas Deus o tornou em bem".

## Conclusão
Que possamos ter a coragem de aceitar a graça de Deus para recomeçar, assim como Pedro, e a sabedoria para ver a mão de Deus trabalhando em nossas adversidades, assim como José. O novo começo que você tanto anseia pode estar a uma oração de distância. Amém.
    `,
    enrichmentSuggestions: `
* **Ilustração:** Use a metáfora de uma árvore podada que, na primavera seguinte, cresce mais forte e com mais frutos.
* **Pergunta para Reflexão:** Peça para a congregação pensar silenciosamente: "Qual área da minha vida eu sinto que é tarde demais para recomeçar? O que me impede de entregar isso a Deus?".
* **Dinâmica:** Incentive as pessoas a escreverem em um pequeno pedaço de papel uma área de fracasso e, simbolicamente, deixá-lo no altar ao final do culto.
    `,
    parameters: {
      theme: 'Recomeço',
      purpose: 'Inspirar',
      duration: 20,
    },
    createdAt: new Date().toISOString(),
};


// --- Funções do Serviço Mock ---

export const getDnaProfile = async (): Promise<DnaProfile> => {
  console.log('MOCK API: Buscando perfil de DNA...');
  return new Promise((resolve) => setTimeout(() => resolve(mockDnaProfile), 1000));
};

export const updateDnaProfile = async (data: any): Promise<{ success: boolean }> => {
  console.log('MOCK API: Atualizando perfil de DNA com os dados:', data);
  return new Promise((resolve) => setTimeout(() => resolve({ success: true }), 1500));
};

export const generateSermon = async (params: any): Promise<Sermon> => {
  console.log('MOCK API: Gerando sermão com parâmetros:', params);
  return new Promise((resolve) => setTimeout(() => resolve(generatedSermonMock), 3000));
};
Tarefa 2: Criar o Componente de Exibição do SermãoAção: Crie o arquivo components/sermon-display.tsx com o código abaixo. Este componente será responsável por renderizar o sermão gerado.Caminho do Arquivo: components/sermon-display.tsx// components/sermon-display.tsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import { Sermon } from '@/lib/mockApi';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';
import { Lightbulb, BookOpen, Clock } from 'lucide-react';

interface SermonDisplayProps {
  sermon: Sermon;
}

export default function SermonDisplay({ sermon }: SermonDisplayProps) {
  return (
    <div className="mt-8 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-3xl font-bold tracking-tight">{sermon.title}</CardTitle>
          <div className="flex items-center space-x-4 text-sm text-muted-foreground pt-2">
            <div className="flex items-center"><BookOpen className="mr-1.5 h-4 w-4" />{sermon.parameters.theme}</div>
            <div className="flex items-center"><Lightbulb className="mr-1.5 h-4 w-4" />{sermon.parameters.purpose}</div>
            <div className="flex items-center"><Clock className="mr-1.5 h-4 w-4" />Aprox. {sermon.parameters.duration} min</div>
          </div>
        </CardHeader>
        <CardContent>
          <article className="prose dark:prose-invert max-w-none">
            <ReactMarkdown>{sermon.content}</ReactMarkdown>
          </article>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Sugestões de Enriquecimento</CardTitle>
          <CardDescription>Use estas ideias para tornar sua mensagem ainda mais impactante.</CardDescription>
        </CardHeader>
        <CardContent>
          <article className="prose dark:prose-invert max-w-none">
            <ReactMarkdown>{sermon.enrichmentSuggestions}</ReactMarkdown>
          </article>
        </CardContent>
      </Card>
    </div>
  );
}
Tarefa 3: Criar o Formulário de Geração de SermãoAção: Crie o arquivo components/sermon-generation-form.tsx. Este é o formulário interativo para o usuário inserir os parâmetros do sermão.Caminho do Arquivo: components/sermon-generation-form.tsx// components/sermon-generation-form.tsx
'use client';

import { useState } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Textarea } from './ui/textarea';
import { Loader2 } from 'lucide-react';

interface SermonGenerationFormProps {
  onSermonGenerated: (sermon: any) => void;
}

// Importe a função do mock
import { generateSermon } from '@/lib/mockApi';

export default function SermonGenerationForm({ onSermonGenerated }: SermonGenerationFormProps) {
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);

    const formData = new FormData(event.currentTarget);
    const params = Object.fromEntries(formData.entries());
    
    const sermon = await generateSermon(params);
    
    onSermonGenerated(sermon);
    setIsLoading(false);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Gerar Novo Sermão</CardTitle>
        <CardDescription>
          Preencha os campos abaixo para criar um sermão personalizado com base no seu DNA.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="theme">Tema Central</Label>
            <Input id="theme" name="theme" placeholder="Ex: A Graça de Deus" required />
          </div>
          <div className="space-y-2">
            <Label htmlFor="purpose">Propósito Principal</Label>
            <Select name="purpose" defaultValue="Inspirar">
              <SelectTrigger>
                <SelectValue placeholder="Selecione um propósito" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Inspirar">Inspirar</SelectItem>
                <SelectItem value="Ensinar">Ensinar</SelectItem>
                <SelectItem value="Confrontar">Confrontar</SelectItem>
                <SelectItem value="Consolar">Consolar</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <Label htmlFor="audience">Público-Alvo</Label>
            <Input id="audience" name="audience" placeholder="Ex: Jovens, Famílias, Igreja em geral" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="duration">Duração Aproximada (min)</Label>
            <Input id="duration" name="duration" type="number" defaultValue={25} />
          </div>
          <div className="md:col-span-2 space-y-2">
            <Label htmlFor="custom-prompt">Seu Próprio Prompt / Texto Base</Label>
            <Textarea
              id="custom-prompt"
              name="custom-prompt"
              placeholder="Opcional: Insira aqui um esboço, um versículo chave ou um resumo que você queira usar como base..."
              rows={4}
            />
          </div>
          <div className="md:col-span-2 flex justify-end">
            <Button type="submit" disabled={isLoading} className="w-full md:w-auto">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Gerando com IA...
                </>
              ) : (
                'Gerar Sermão'
              )}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
Tarefa 4: Criar a Página Principal "Gerar Sermão"Ação: Crie o diretório gerar e o arquivo page.tsx dentro dele. Este é o componente principal da página, que gerencia o estado entre o formulário e a exibição do resultado.Caminho do Arquivo: app/(dashboard)/gerar/page.tsx// app/(dashboard)/gerar/page.tsx
'use client';

import { useState } from 'react';
import { Sermon } from '@/lib/mockApi';
import SermonGenerationForm from '@/components/sermon-generation-form';
import SermonDisplay from '@/components/sermon-display';

export default function GenerateSermonPage() {
  const [sermon, setSermon] = useState<Sermon | null>(null);

  return (
    <div className="space-y-6">
      {/* O formulário só será exibido se nenhum sermão foi gerado ainda */}
      {!sermon && (
        <>
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Crie sua Mensagem</h1>
            <p className="text-muted-foreground">
              A ferramenta de criação para sermões de alto impacto.
            </p>
          </div>
          <SermonGenerationForm onSermonGenerated={setSermon} />
        </>
      )}

      {/* Exibe o sermão gerado e um botão para criar um novo */}
      {sermon && (
        <>
          <SermonDisplay sermon={sermon} />
          <div className="text-center pt-4">
            <button
              onClick={() => setSermon(null)}
              className="text-sm font-semibold text-primary hover:underline"
            >
              Gerar um novo sermão
            </button>
          </div>
        </>
      )}
    </div>
  );
}
Tarefa 5: Atualizar o Layout Principal para NavegaçãoAção: Edite o arquivo app/(dashboard)/layout.tsx para adicionar o link "Gerar Sermão" no menu de navegação do cabeçalho.Caminho do Arquivo: app/(dashboard)/layout.tsx// app/(dashboard)/layout.tsx
import { ReactNode } from 'react';
import { UserButton } from '@clerk/nextjs';
import Link from 'next/link';
import Image from 'next/image';
import Footer from '@/components/layout/footer';

export default async function DashboardLayout({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <div className="relative flex min-h-screen flex-col">
      <header className="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0">
          <div className="flex gap-6 md:gap-10">
            <Link href="/" className="flex items-center space-x-2">
              <Image
                src="/logo.png"
                alt="SermonAI Logo"
                width={24}
                height={24}
                className="h-6 w-6"
              />
              <span className="inline-block font-bold">SermonAI</span>
            </Link>
          </div>
          <div className="flex flex-1 items-center justify-end space-x-4">
            {/* === INÍCIO DA ALTERAÇÃO === */}
            <nav className="flex items-center space-x-6 text-sm font-medium">
              <Link
                href="/gerar"
                className="transition-colors hover:text-foreground/80 text-foreground"
              >
                Gerar Sermão
              </Link>
              <Link
                href="/dna"
                className="transition-colors hover:text-foreground/80 text-muted-foreground"
              >
                Meu DNA
              </Link>
              {/* Adicione outros links aqui no futuro */}
            </nav>
            {/* === FIM DA ALTERAÇÃO === */}
            <div className="flex items-center space-x-4">
               <UserButton afterSignOutUrl="/" />
            </div>
          </div>
        </div>
      </header>
      
      <main className="flex-1">
        <div className="container py-8">
            {children}
        </div>
      </main>

      <Footer />
    </div>
  );
}
Após executar todas essas tarefas, a funcionalidade "Gerar Sermão" estará completa do ponto de vista do frontend. Você poderá navegar até a página, preencher o formulário, simular a geração e ver o resultado na tela.